import java.util.*;

public class abc {
    public static void main(String[] args) {
        Solution a2 = new Solution();
        int[][] arr={{1,0,1,1,1}, {1,0,1,0,1}, {1,0,1,1,1},{1,1,1,0,1},{0,0,0,0,1}};
        int[][] arr1={{1, 0, 1, 1, 1}, {1, 0, 1, 0, 1}, {1, 0, 1, 1, 1},{1, 1, 1, 0, 0},{0, 0, 0, 1, 1}};
       
        // int[] arr={1,2,3,4,5};
        // int[] arr1={1,3,2,4,2};

        System.out.println(a2.solution(arr));
        System.out.println(a2.solution(arr1)); 
                   
        
    }   
}
class Pair{
        int x,y,count;
        Pair(int x,int y,int count){
            this.x=x;
            this.y=y;
            this.count=count;
        }
    }

class Solution {
    public int solution(int[][] maps) {
        int answer = 0;

        int width=maps[0].length, length=maps.length;
        int[] end={width-1,length-1};

        // 우,좌,하,상 순서
        int[][] move={{0,1},{0,-1},{1,0},{-1,0}};

        Queue<Pair> que = new LinkedList<>();
        que.add(new Pair(0,0,0));
        maps[0][0]=0;
        answer+=1;

        while(!que.isEmpty()){
            Pair check= que.poll();     
            if(check.y==end[1] && check.x==end[0]){ 
                answer+=check.count;
                break;
            }

            for (int[] m : move) {
                int m_x= check.x + m[1];
                int m_y= check.y + m[0];

                if( (0<=m_x && m_x<width) && (0<=m_y && m_y<length)){
                    if(maps[m_y][m_x] !=0){
                        
                        maps[m_y][m_x]=0;
                        que.add(new Pair(m_x, m_y, check.count+1));
                    }
                    
                }
            }

        }
        if(answer==1) return -1;


        return answer;
    }
}