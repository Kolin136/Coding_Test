import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.*;

public class Main {
    public static int[][] graph;
    public static boolean[] visit;
    public static void main(String[] args) throws Exception{
        
        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(bf.readLine());
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());
        int V = Integer.parseInt(st.nextToken());
        
        graph= new int[N+1][N+1];
        visit = new boolean[N+1];

        for (int i = 0; i < M; i++) {
            st= new StringTokenizer(bf.readLine());
            int a = Integer.parseInt(st.nextToken());  
            int b = Integer.parseInt(st.nextToken()); 
            graph[a][b]=b;
            graph[b][a]=a;
        }

        Dfs(V);
        visit = new boolean[N+1];
        System.out.println();
        Bfs(V);


       
    }   
    public static void Bfs(int start){
        Queue<Integer> que=new LinkedList<>();
        que.add(start);
        visit[start]=true;
        while(!que.isEmpty()){
            int num = que.poll();
            System.out.print(num+" ");
            for (int i = 1; i < graph[num].length; i++) {
                    if(graph[num][i] !=0 && visit[i] == false){
                        visit[i]=true;
                        que.add(i);
                    }
                    
                }
            }

    }
        
    public static void Dfs(int start){
        visit[start]=true;
        System.out.print(start+" ");
        for (int i = 1; i < graph[start].length; i++) {
                    if(graph[start][i] !=0 && visit[i] == false){
                        Dfs(i);   
                    }    
        }
    }
}

    


