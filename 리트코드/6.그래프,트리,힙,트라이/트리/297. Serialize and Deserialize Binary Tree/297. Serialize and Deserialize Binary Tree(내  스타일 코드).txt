from collections import deque
import collections
# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
class Codec:

    def serialize(self, root):
        que = deque([(1,root)])
        result = []
        if root is None: return None
        while que:
            for _ in range(len(que)):
                idx,node = que.popleft()
                result.append(str(idx)+"&"+str(node.val))
                if node.left: que.append((idx*2,node.left))
                if node.right: que.append(((idx*2)+1,node.right))

        return ",".join(result)


        

    def deserialize(self, data):
        if data is None: return None
        data_list = data.split(",")
        graph = collections.defaultdict(int)
        for i in data_list:
            a,b = map(int,i.split("&"))
            graph[a]=b
        
        
        def create_tree(idx):
            if idx not in graph:
                return None

            node = TreeNode(graph[idx])
            node.left = create_tree(idx*2)
            node.right = create_tree((idx*2)+1)

            return node
        
        return create_tree(1)


# [null,1,2,3,null,null,4,5,null,null,null,null,6,7,null,null]

# Your Codec object will be instantiated and called as such:
# ser = Codec()
# deser = Codec()
# ans = deser.deserialize(ser.serialize(root))
        

# 리프 노드부터 생성

node7 = TreeNode(7)
node6 = TreeNode(6)
node5 = TreeNode(5)
node4 = TreeNode(4,left=node6, right=node7)
node3 = TreeNode(3,left=node4, right=node5)
node2 = TreeNode(-2)
root_node = TreeNode(1, left=node2,right=node3)

ser = Codec()
deser = Codec()

print(deser.deserialize(ser.serialize(root_node)))

