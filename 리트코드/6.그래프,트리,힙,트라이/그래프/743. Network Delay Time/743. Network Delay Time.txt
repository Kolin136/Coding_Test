class Solution:
    def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:
        result = -1
        graph = [[] for _ in range(n+1)]
        distance = [1e9]* (n+1)
        for i in times:
            a,b,c = i
            graph[a].append((b,c))

        def dijkstra(start):
            heap = []
            heapq.heappush(heap,(0,start))
            distance[start] = 0

            while heap:
                now,area = heapq.heappop(heap)
                if now > distance[area]: continue
                
                for i in graph[area]:
                    check = now + i[1]
                    if check < distance[i[0]]:
                        distance[i[0]] = check
                        heapq.heappush(heap,(check,i[0]))


        dijkstra(k)
        for i in range(1,n+1):
            if distance[i] == 1e9: return -1
            if distance[i] != 0 and result < distance[i]: result = distance[i]

 

        return result