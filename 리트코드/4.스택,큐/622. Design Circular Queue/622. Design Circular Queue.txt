class MyCircularQueue:

    def __init__(self, k: int):
        self.que = [None] * k 
        self.maxlen = k
        self.p1,self.p2 = 0,0

    def enQueue(self, value: int) -> bool:
        if self.que[self.p2] is None:
            self.que[self.p2] = value
            self.p2 = (self.p2 + 1) % self.maxlen
            return True 
        else: return False

    def deQueue(self) -> bool:
        if self.que[self.p1] is not None:
            self.que[self.p1] = None
            self.p1 = (self.p1 +1) % self.maxlen
            return True 
        else: return False 

    def Front(self) -> int:
        if self.que[self.p1] is not None:
            return self.que[self.p1]
        else: return -1
        
    def Rear(self) -> int:
        index = -1 if self.p2 == 0 else self.p2-1
        if self.que[index] is not None:
            return self.que[index]
        else: return -1   
        
    def isEmpty(self) -> bool:
        if self.p1 == self.p2 and self.que[self.p2] is None:
            return True
        else: return False 

    def isFull(self) -> bool:
        if self.p1 == self.p2 and self.que[self.p2] is not None:
            return True
        else: return False 
        