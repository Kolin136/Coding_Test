import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.*;

public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(bf.readLine());
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());
        int B = Integer.parseInt(st.nextToken());

        int count=99999999;
        int height=0;
        
        int max_height=0;
        int min_height=256;

        Integer[][] build = new Integer[N][M];
        //현재 땅의 초기형태값 입력하고 2차배열 build에 넣는다
        for(int i=0; i<N; i++){
            st=new StringTokenizer(bf.readLine());
            for(int k=0; k<M; k++){
                build[i][k]=Integer.parseInt(st.nextToken());
            }
        }
        //땅의 최소,최대 높이를 찾는다
        for(Integer[] i:build){
            for(Integer k:i){
                if(k>max_height) max_height=k;
                if(k<min_height) min_height=k;
            }
        }
        //큐에 땅의 최소높이부터 1씩 더해주면서 최대높이까지의 값을 차례대로 넣는다
        Queue<Integer> que = new LinkedList<>();
        for(int s=min_height; s<=max_height; s++){
            que.add(s);
        }
        //큐에
        while(!que.isEmpty()){
            int num= que.poll();
            int check_count=0;
            int block=B;

            for(Integer[] i:build){
                for(Integer k:i){
                    if(num==k) continue;
                    else if(num>k){
                        check_count+=(num-k);
                        block-=(num-k);
                    }
                    else{
                        check_count+=(k-num)*2;
                        block+=(k-num);
                    }
                }
            }
            if(block>=0 && check_count<=count){
                count=check_count;
                height=num;
            }


        }

        System.out.println(count+" "+height);
         
    }   
}