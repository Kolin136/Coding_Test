def swap_elements(my_list, index1, index2):
    temp = my_list[index1]
    my_list[index1] = my_list[index2]
    my_list[index2] = temp

# 퀵 정렬에서 사용되는 partition 함수
def partition(my_list, start, end):
    # 여기에 코드를 작성하세요
    p = end
    b = start
    i = start
    
   
    while i < p:
        if my_list[p] >= my_list[i]:
           swap_elements(my_list,b,i)
           b += 1
           i += 1
        else:  # p < i:
           i += 1
    swap_elements(my_list,b,p)
    return b


# 퀵 정렬
def quicksort(my_list, start, end):
    
    if end - start < 1:
        return


    idx = partition(my_list, start, end)
    
    quicksort(my_list,start,idx-1)
    quicksort(my_list,idx+1,end)
    
 

# 테스트 코드 1
list1 = [1, 3, 5, 7, 9, 11, 13, 11]
quicksort(list1, 0, len(list1) - 1)
print(list1)

# 테스트 코드 2
list2 = [28, 13, 9, 30, 1, 48, 5, 7, 15]
quicksort(list2, 0, len(list2) - 1)
print(list2)

# 테스트 코드 3
list3 = [2, 5, 6, 7, 1, 2, 4, 7, 10, 11, 4, 15, 13, 1, 6, 4]
quicksort(list3, 0, len(list3) - 1)
print(list3)

<<예외로 quicksort함수 리턴값이 정렬댄 리스트인것>

def quicksort(my_list, start, end):
    if len(my_list) <= 1:
        return my_list

    if len(my_list) ==2:
        partition(my_list, start, end)
        
        return my_list
    
    idx = partition(my_list, start, end)
    
    l_list = my_list[:idx]
    r_list = my_list[idx:]
    
    
    
    return quicksort(l_list,start,len(l_list)-1) + quicksort(r_list,start,len(r_list)-1)

